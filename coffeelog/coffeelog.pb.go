// Code generated by protoc-gen-go.
// source: coffeelog.proto
// DO NOT EDIT!

/*
Package coffeelog is a generated protocol buffer package.

It is generated from these files:
	coffeelog.proto

It has these top-level messages:
	UserRequest
	UserResponse
	User
	GoogleUser
	Roaster
	RoasterRequest
	RoasterCreateRequest
	RoasterResponse
	RoastersRequest
	RoastersResponse
	PostActivityRequest
	PostActivityResponse
	Activity
	ActivityRequest
*/
package coffeelog

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Activity_DrinkAmount_CaffeineUnit int32

const (
	Activity_DrinkAmount_UNSPECIFIED Activity_DrinkAmount_CaffeineUnit = 0
	Activity_DrinkAmount_SHOTS       Activity_DrinkAmount_CaffeineUnit = 1
	Activity_DrinkAmount_OUNCES      Activity_DrinkAmount_CaffeineUnit = 2
)

var Activity_DrinkAmount_CaffeineUnit_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "SHOTS",
	2: "OUNCES",
}
var Activity_DrinkAmount_CaffeineUnit_value = map[string]int32{
	"UNSPECIFIED": 0,
	"SHOTS":       1,
	"OUNCES":      2,
}

func (x Activity_DrinkAmount_CaffeineUnit) String() string {
	return proto.EnumName(Activity_DrinkAmount_CaffeineUnit_name, int32(x))
}
func (Activity_DrinkAmount_CaffeineUnit) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{12, 1, 0}
}

type UserRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *UserRequest) Reset()                    { *m = UserRequest{} }
func (m *UserRequest) String() string            { return proto.CompactTextString(m) }
func (*UserRequest) ProtoMessage()               {}
func (*UserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UserRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type UserResponse struct {
	Found bool  `protobuf:"varint,1,opt,name=Found" json:"Found,omitempty"`
	User  *User `protobuf:"bytes,2,opt,name=User" json:"User,omitempty"`
}

func (m *UserResponse) Reset()                    { *m = UserResponse{} }
func (m *UserResponse) String() string            { return proto.CompactTextString(m) }
func (*UserResponse) ProtoMessage()               {}
func (*UserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserResponse) GetFound() bool {
	if m != nil {
		return m.Found
	}
	return false
}

func (m *UserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type User struct {
	ID          string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=DisplayName" json:"DisplayName,omitempty"`
	Picture     string `protobuf:"bytes,3,opt,name=Picture" json:"Picture,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *User) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *User) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *User) GetPicture() string {
	if m != nil {
		return m.Picture
	}
	return ""
}

type GoogleUser struct {
	ID          string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=DisplayName" json:"DisplayName,omitempty"`
	PictureURL  string `protobuf:"bytes,3,opt,name=PictureURL" json:"PictureURL,omitempty"`
	Email       string `protobuf:"bytes,4,opt,name=Email" json:"Email,omitempty"`
}

func (m *GoogleUser) Reset()                    { *m = GoogleUser{} }
func (m *GoogleUser) String() string            { return proto.CompactTextString(m) }
func (*GoogleUser) ProtoMessage()               {}
func (*GoogleUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GoogleUser) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *GoogleUser) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *GoogleUser) GetPictureURL() string {
	if m != nil {
		return m.PictureURL
	}
	return ""
}

func (m *GoogleUser) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type Roaster struct {
	ID      int64  `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Picture string `protobuf:"bytes,3,opt,name=Picture" json:"Picture,omitempty"`
}

func (m *Roaster) Reset()                    { *m = Roaster{} }
func (m *Roaster) String() string            { return proto.CompactTextString(m) }
func (*Roaster) ProtoMessage()               {}
func (*Roaster) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Roaster) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Roaster) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Roaster) GetPicture() string {
	if m != nil {
		return m.Picture
	}
	return ""
}

type RoasterRequest struct {
	// Types that are valid to be assigned to Query:
	//	*RoasterRequest_ID
	//	*RoasterRequest_Name
	Query isRoasterRequest_Query `protobuf_oneof:"Query"`
}

func (m *RoasterRequest) Reset()                    { *m = RoasterRequest{} }
func (m *RoasterRequest) String() string            { return proto.CompactTextString(m) }
func (*RoasterRequest) ProtoMessage()               {}
func (*RoasterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type isRoasterRequest_Query interface {
	isRoasterRequest_Query()
}

type RoasterRequest_ID struct {
	ID int64 `protobuf:"varint,1,opt,name=ID,oneof"`
}
type RoasterRequest_Name struct {
	Name string `protobuf:"bytes,2,opt,name=Name,oneof"`
}

func (*RoasterRequest_ID) isRoasterRequest_Query()   {}
func (*RoasterRequest_Name) isRoasterRequest_Query() {}

func (m *RoasterRequest) GetQuery() isRoasterRequest_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *RoasterRequest) GetID() int64 {
	if x, ok := m.GetQuery().(*RoasterRequest_ID); ok {
		return x.ID
	}
	return 0
}

func (m *RoasterRequest) GetName() string {
	if x, ok := m.GetQuery().(*RoasterRequest_Name); ok {
		return x.Name
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RoasterRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RoasterRequest_OneofMarshaler, _RoasterRequest_OneofUnmarshaler, _RoasterRequest_OneofSizer, []interface{}{
		(*RoasterRequest_ID)(nil),
		(*RoasterRequest_Name)(nil),
	}
}

func _RoasterRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RoasterRequest)
	// Query
	switch x := m.Query.(type) {
	case *RoasterRequest_ID:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.ID))
	case *RoasterRequest_Name:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Name)
	case nil:
	default:
		return fmt.Errorf("RoasterRequest.Query has unexpected type %T", x)
	}
	return nil
}

func _RoasterRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RoasterRequest)
	switch tag {
	case 1: // Query.ID
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Query = &RoasterRequest_ID{int64(x)}
		return true, err
	case 2: // Query.Name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Query = &RoasterRequest_Name{x}
		return true, err
	default:
		return false, nil
	}
}

func _RoasterRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RoasterRequest)
	// Query
	switch x := m.Query.(type) {
	case *RoasterRequest_ID:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ID))
	case *RoasterRequest_Name:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Name)))
		n += len(x.Name)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RoasterCreateRequest struct {
	Name string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *RoasterCreateRequest) Reset()                    { *m = RoasterCreateRequest{} }
func (m *RoasterCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*RoasterCreateRequest) ProtoMessage()               {}
func (*RoasterCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RoasterCreateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RoasterResponse struct {
	Found   bool     `protobuf:"varint,1,opt,name=Found" json:"Found,omitempty"`
	Roaster *Roaster `protobuf:"bytes,2,opt,name=Roaster" json:"Roaster,omitempty"`
}

func (m *RoasterResponse) Reset()                    { *m = RoasterResponse{} }
func (m *RoasterResponse) String() string            { return proto.CompactTextString(m) }
func (*RoasterResponse) ProtoMessage()               {}
func (*RoasterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RoasterResponse) GetFound() bool {
	if m != nil {
		return m.Found
	}
	return false
}

func (m *RoasterResponse) GetRoaster() *Roaster {
	if m != nil {
		return m.Roaster
	}
	return nil
}

type RoastersRequest struct {
}

func (m *RoastersRequest) Reset()                    { *m = RoastersRequest{} }
func (m *RoastersRequest) String() string            { return proto.CompactTextString(m) }
func (*RoastersRequest) ProtoMessage()               {}
func (*RoastersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type RoastersResponse struct {
	Results []*Roaster `protobuf:"bytes,1,rep,name=Results" json:"Results,omitempty"`
}

func (m *RoastersResponse) Reset()                    { *m = RoastersResponse{} }
func (m *RoastersResponse) String() string            { return proto.CompactTextString(m) }
func (*RoastersResponse) ProtoMessage()               {}
func (*RoastersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RoastersResponse) GetResults() []*Roaster {
	if m != nil {
		return m.Results
	}
	return nil
}

type PostActivityRequest struct {
	UserID      string                     `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
	Homebrew    bool                       `protobuf:"varint,2,opt,name=Homebrew" json:"Homebrew,omitempty"`
	Drink       string                     `protobuf:"bytes,6,opt,name=Drink" json:"Drink,omitempty"`
	Method      string                     `protobuf:"bytes,3,opt,name=Method" json:"Method,omitempty"`
	Amount      *Activity_DrinkAmount      `protobuf:"bytes,4,opt,name=Amount" json:"Amount,omitempty"`
	Date        *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=Date" json:"Date,omitempty"`
	RoasterName string                     `protobuf:"bytes,8,opt,name=RoasterName" json:"RoasterName,omitempty"`
	Origin      string                     `protobuf:"bytes,7,opt,name=Origin" json:"Origin,omitempty"`
	Notes       string                     `protobuf:"bytes,9,opt,name=Notes" json:"Notes,omitempty"`
	Picture     *PostActivityRequest_File  `protobuf:"bytes,10,opt,name=Picture" json:"Picture,omitempty"`
}

func (m *PostActivityRequest) Reset()                    { *m = PostActivityRequest{} }
func (m *PostActivityRequest) String() string            { return proto.CompactTextString(m) }
func (*PostActivityRequest) ProtoMessage()               {}
func (*PostActivityRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PostActivityRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *PostActivityRequest) GetHomebrew() bool {
	if m != nil {
		return m.Homebrew
	}
	return false
}

func (m *PostActivityRequest) GetDrink() string {
	if m != nil {
		return m.Drink
	}
	return ""
}

func (m *PostActivityRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *PostActivityRequest) GetAmount() *Activity_DrinkAmount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *PostActivityRequest) GetDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *PostActivityRequest) GetRoasterName() string {
	if m != nil {
		return m.RoasterName
	}
	return ""
}

func (m *PostActivityRequest) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *PostActivityRequest) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *PostActivityRequest) GetPicture() *PostActivityRequest_File {
	if m != nil {
		return m.Picture
	}
	return nil
}

type PostActivityRequest_File struct {
	Data        []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	Filename    string `protobuf:"bytes,2,opt,name=Filename" json:"Filename,omitempty"`
	ContentType string `protobuf:"bytes,3,opt,name=ContentType" json:"ContentType,omitempty"`
}

func (m *PostActivityRequest_File) Reset()                    { *m = PostActivityRequest_File{} }
func (m *PostActivityRequest_File) String() string            { return proto.CompactTextString(m) }
func (*PostActivityRequest_File) ProtoMessage()               {}
func (*PostActivityRequest_File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 0} }

func (m *PostActivityRequest_File) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PostActivityRequest_File) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *PostActivityRequest_File) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

type PostActivityResponse struct {
	ID int64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *PostActivityResponse) Reset()                    { *m = PostActivityResponse{} }
func (m *PostActivityResponse) String() string            { return proto.CompactTextString(m) }
func (*PostActivityResponse) ProtoMessage()               {}
func (*PostActivityResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PostActivityResponse) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type Activity struct {
	ID         int64                      `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	User       *User                      `protobuf:"bytes,2,opt,name=User" json:"User,omitempty"`
	Homebrew   bool                       `protobuf:"varint,12,opt,name=Homebrew" json:"Homebrew,omitempty"`
	Drink      string                     `protobuf:"bytes,3,opt,name=Drink" json:"Drink,omitempty"`
	Method     string                     `protobuf:"bytes,4,opt,name=Method" json:"Method,omitempty"`
	Amount     *Activity_DrinkAmount      `protobuf:"bytes,5,opt,name=Amount" json:"Amount,omitempty"`
	Roaster    *Activity_RoasterInfo      `protobuf:"bytes,6,opt,name=Roaster" json:"Roaster,omitempty"`
	Origin     string                     `protobuf:"bytes,7,opt,name=Origin" json:"Origin,omitempty"`
	Notes      string                     `protobuf:"bytes,8,opt,name=Notes" json:"Notes,omitempty"`
	PictureURL string                     `protobuf:"bytes,9,opt,name=PictureURL" json:"PictureURL,omitempty"`
	Date       *google_protobuf.Timestamp `protobuf:"bytes,10,opt,name=Date" json:"Date,omitempty"`
	LogDate    *google_protobuf.Timestamp `protobuf:"bytes,11,opt,name=LogDate" json:"LogDate,omitempty"`
}

func (m *Activity) Reset()                    { *m = Activity{} }
func (m *Activity) String() string            { return proto.CompactTextString(m) }
func (*Activity) ProtoMessage()               {}
func (*Activity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Activity) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Activity) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Activity) GetHomebrew() bool {
	if m != nil {
		return m.Homebrew
	}
	return false
}

func (m *Activity) GetDrink() string {
	if m != nil {
		return m.Drink
	}
	return ""
}

func (m *Activity) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Activity) GetAmount() *Activity_DrinkAmount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *Activity) GetRoaster() *Activity_RoasterInfo {
	if m != nil {
		return m.Roaster
	}
	return nil
}

func (m *Activity) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *Activity) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *Activity) GetPictureURL() string {
	if m != nil {
		return m.PictureURL
	}
	return ""
}

func (m *Activity) GetDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *Activity) GetLogDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.LogDate
	}
	return nil
}

type Activity_RoasterInfo struct {
	ID   int64  `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *Activity_RoasterInfo) Reset()                    { *m = Activity_RoasterInfo{} }
func (m *Activity_RoasterInfo) String() string            { return proto.CompactTextString(m) }
func (*Activity_RoasterInfo) ProtoMessage()               {}
func (*Activity_RoasterInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12, 0} }

func (m *Activity_RoasterInfo) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Activity_RoasterInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Activity_DrinkAmount struct {
	N    int32                             `protobuf:"varint,1,opt,name=N" json:"N,omitempty"`
	Unit Activity_DrinkAmount_CaffeineUnit `protobuf:"varint,2,opt,name=Unit,enum=Activity_DrinkAmount_CaffeineUnit" json:"Unit,omitempty"`
}

func (m *Activity_DrinkAmount) Reset()                    { *m = Activity_DrinkAmount{} }
func (m *Activity_DrinkAmount) String() string            { return proto.CompactTextString(m) }
func (*Activity_DrinkAmount) ProtoMessage()               {}
func (*Activity_DrinkAmount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12, 1} }

func (m *Activity_DrinkAmount) GetN() int32 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *Activity_DrinkAmount) GetUnit() Activity_DrinkAmount_CaffeineUnit {
	if m != nil {
		return m.Unit
	}
	return Activity_DrinkAmount_UNSPECIFIED
}

type ActivityRequest struct {
	ID int64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *ActivityRequest) Reset()                    { *m = ActivityRequest{} }
func (m *ActivityRequest) String() string            { return proto.CompactTextString(m) }
func (*ActivityRequest) ProtoMessage()               {}
func (*ActivityRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ActivityRequest) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func init() {
	proto.RegisterType((*UserRequest)(nil), "UserRequest")
	proto.RegisterType((*UserResponse)(nil), "UserResponse")
	proto.RegisterType((*User)(nil), "User")
	proto.RegisterType((*GoogleUser)(nil), "GoogleUser")
	proto.RegisterType((*Roaster)(nil), "Roaster")
	proto.RegisterType((*RoasterRequest)(nil), "RoasterRequest")
	proto.RegisterType((*RoasterCreateRequest)(nil), "RoasterCreateRequest")
	proto.RegisterType((*RoasterResponse)(nil), "RoasterResponse")
	proto.RegisterType((*RoastersRequest)(nil), "RoastersRequest")
	proto.RegisterType((*RoastersResponse)(nil), "RoastersResponse")
	proto.RegisterType((*PostActivityRequest)(nil), "PostActivityRequest")
	proto.RegisterType((*PostActivityRequest_File)(nil), "PostActivityRequest.File")
	proto.RegisterType((*PostActivityResponse)(nil), "PostActivityResponse")
	proto.RegisterType((*Activity)(nil), "Activity")
	proto.RegisterType((*Activity_RoasterInfo)(nil), "Activity.RoasterInfo")
	proto.RegisterType((*Activity_DrinkAmount)(nil), "Activity.DrinkAmount")
	proto.RegisterType((*ActivityRequest)(nil), "ActivityRequest")
	proto.RegisterEnum("Activity_DrinkAmount_CaffeineUnit", Activity_DrinkAmount_CaffeineUnit_name, Activity_DrinkAmount_CaffeineUnit_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserDirectory service

type UserDirectoryClient interface {
	AuthorizeGoogle(ctx context.Context, in *GoogleUser, opts ...grpc.CallOption) (*User, error)
	GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
}

type userDirectoryClient struct {
	cc *grpc.ClientConn
}

func NewUserDirectoryClient(cc *grpc.ClientConn) UserDirectoryClient {
	return &userDirectoryClient{cc}
}

func (c *userDirectoryClient) AuthorizeGoogle(ctx context.Context, in *GoogleUser, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/UserDirectory/AuthorizeGoogle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDirectoryClient) GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := grpc.Invoke(ctx, "/UserDirectory/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserDirectory service

type UserDirectoryServer interface {
	AuthorizeGoogle(context.Context, *GoogleUser) (*User, error)
	GetUser(context.Context, *UserRequest) (*UserResponse, error)
}

func RegisterUserDirectoryServer(s *grpc.Server, srv UserDirectoryServer) {
	s.RegisterService(&_UserDirectory_serviceDesc, srv)
}

func _UserDirectory_AuthorizeGoogle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoogleUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDirectoryServer).AuthorizeGoogle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserDirectory/AuthorizeGoogle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDirectoryServer).AuthorizeGoogle(ctx, req.(*GoogleUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDirectory_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDirectoryServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserDirectory/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDirectoryServer).GetUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserDirectory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "UserDirectory",
	HandlerType: (*UserDirectoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthorizeGoogle",
			Handler:    _UserDirectory_AuthorizeGoogle_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserDirectory_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coffeelog.proto",
}

// Client API for RoasterDirectory service

type RoasterDirectoryClient interface {
	GetRoaster(ctx context.Context, in *RoasterRequest, opts ...grpc.CallOption) (*RoasterResponse, error)
	CreateRoaster(ctx context.Context, in *RoasterCreateRequest, opts ...grpc.CallOption) (*Roaster, error)
	ListRoaster(ctx context.Context, in *RoastersRequest, opts ...grpc.CallOption) (*RoastersResponse, error)
}

type roasterDirectoryClient struct {
	cc *grpc.ClientConn
}

func NewRoasterDirectoryClient(cc *grpc.ClientConn) RoasterDirectoryClient {
	return &roasterDirectoryClient{cc}
}

func (c *roasterDirectoryClient) GetRoaster(ctx context.Context, in *RoasterRequest, opts ...grpc.CallOption) (*RoasterResponse, error) {
	out := new(RoasterResponse)
	err := grpc.Invoke(ctx, "/RoasterDirectory/GetRoaster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roasterDirectoryClient) CreateRoaster(ctx context.Context, in *RoasterCreateRequest, opts ...grpc.CallOption) (*Roaster, error) {
	out := new(Roaster)
	err := grpc.Invoke(ctx, "/RoasterDirectory/CreateRoaster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roasterDirectoryClient) ListRoaster(ctx context.Context, in *RoastersRequest, opts ...grpc.CallOption) (*RoastersResponse, error) {
	out := new(RoastersResponse)
	err := grpc.Invoke(ctx, "/RoasterDirectory/ListRoaster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoasterDirectory service

type RoasterDirectoryServer interface {
	GetRoaster(context.Context, *RoasterRequest) (*RoasterResponse, error)
	CreateRoaster(context.Context, *RoasterCreateRequest) (*Roaster, error)
	ListRoaster(context.Context, *RoastersRequest) (*RoastersResponse, error)
}

func RegisterRoasterDirectoryServer(s *grpc.Server, srv RoasterDirectoryServer) {
	s.RegisterService(&_RoasterDirectory_serviceDesc, srv)
}

func _RoasterDirectory_GetRoaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoasterDirectoryServer).GetRoaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoasterDirectory/GetRoaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoasterDirectoryServer).GetRoaster(ctx, req.(*RoasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoasterDirectory_CreateRoaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoasterCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoasterDirectoryServer).CreateRoaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoasterDirectory/CreateRoaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoasterDirectoryServer).CreateRoaster(ctx, req.(*RoasterCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoasterDirectory_ListRoaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoastersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoasterDirectoryServer).ListRoaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoasterDirectory/ListRoaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoasterDirectoryServer).ListRoaster(ctx, req.(*RoastersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoasterDirectory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RoasterDirectory",
	HandlerType: (*RoasterDirectoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoaster",
			Handler:    _RoasterDirectory_GetRoaster_Handler,
		},
		{
			MethodName: "CreateRoaster",
			Handler:    _RoasterDirectory_CreateRoaster_Handler,
		},
		{
			MethodName: "ListRoaster",
			Handler:    _RoasterDirectory_ListRoaster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coffeelog.proto",
}

// Client API for ActivityDirectory service

type ActivityDirectoryClient interface {
	PostActivity(ctx context.Context, in *PostActivityRequest, opts ...grpc.CallOption) (*PostActivityResponse, error)
	GetActivity(ctx context.Context, in *ActivityRequest, opts ...grpc.CallOption) (*Activity, error)
}

type activityDirectoryClient struct {
	cc *grpc.ClientConn
}

func NewActivityDirectoryClient(cc *grpc.ClientConn) ActivityDirectoryClient {
	return &activityDirectoryClient{cc}
}

func (c *activityDirectoryClient) PostActivity(ctx context.Context, in *PostActivityRequest, opts ...grpc.CallOption) (*PostActivityResponse, error) {
	out := new(PostActivityResponse)
	err := grpc.Invoke(ctx, "/ActivityDirectory/PostActivity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityDirectoryClient) GetActivity(ctx context.Context, in *ActivityRequest, opts ...grpc.CallOption) (*Activity, error) {
	out := new(Activity)
	err := grpc.Invoke(ctx, "/ActivityDirectory/GetActivity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ActivityDirectory service

type ActivityDirectoryServer interface {
	PostActivity(context.Context, *PostActivityRequest) (*PostActivityResponse, error)
	GetActivity(context.Context, *ActivityRequest) (*Activity, error)
}

func RegisterActivityDirectoryServer(s *grpc.Server, srv ActivityDirectoryServer) {
	s.RegisterService(&_ActivityDirectory_serviceDesc, srv)
}

func _ActivityDirectory_PostActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDirectoryServer).PostActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ActivityDirectory/PostActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDirectoryServer).PostActivity(ctx, req.(*PostActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityDirectory_GetActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityDirectoryServer).GetActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ActivityDirectory/GetActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityDirectoryServer).GetActivity(ctx, req.(*ActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ActivityDirectory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ActivityDirectory",
	HandlerType: (*ActivityDirectoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostActivity",
			Handler:    _ActivityDirectory_PostActivity_Handler,
		},
		{
			MethodName: "GetActivity",
			Handler:    _ActivityDirectory_GetActivity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coffeelog.proto",
}

func init() { proto.RegisterFile("coffeelog.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 865 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x55, 0xcd, 0x6e, 0xeb, 0x44,
	0x14, 0xb6, 0x1b, 0xe7, 0xef, 0x38, 0x6d, 0xd2, 0x21, 0x45, 0xbe, 0x96, 0x80, 0x32, 0x0b, 0xa8,
	0x10, 0x4c, 0x75, 0x73, 0xaf, 0xba, 0x43, 0xa8, 0x24, 0x6d, 0x1a, 0x51, 0xd2, 0xe2, 0x36, 0x12,
	0x5b, 0x37, 0x77, 0x92, 0x6b, 0x91, 0x78, 0x82, 0x3d, 0x01, 0x85, 0x15, 0x7b, 0x1e, 0x86, 0x15,
	0x6f, 0xc2, 0x03, 0xa1, 0xf9, 0xb3, 0x1d, 0x37, 0xa5, 0xd5, 0x5d, 0x9e, 0xff, 0x73, 0xe6, 0xfb,
	0xce, 0x19, 0x68, 0x4f, 0xd9, 0x6c, 0x46, 0xe9, 0x82, 0xcd, 0xc9, 0x2a, 0x61, 0x9c, 0xf9, 0x9f,
	0xcd, 0x19, 0x9b, 0x2f, 0xe8, 0xa9, 0x94, 0x1e, 0xd6, 0xb3, 0x53, 0x1e, 0x2d, 0x69, 0xca, 0xc3,
	0xe5, 0x4a, 0x39, 0xe0, 0x4f, 0xc0, 0x9d, 0xa4, 0x34, 0x09, 0xe8, 0xaf, 0x6b, 0x9a, 0x72, 0x74,
	0x00, 0x7b, 0xa3, 0x81, 0x67, 0x1f, 0xdb, 0x27, 0xcd, 0x60, 0x6f, 0x34, 0xc0, 0xdf, 0x41, 0x4b,
	0x99, 0xd3, 0x15, 0x8b, 0x53, 0x8a, 0xba, 0x50, 0xbd, 0x64, 0xeb, 0xf8, 0x9d, 0x74, 0x69, 0x04,
	0x4a, 0x40, 0xaf, 0xc0, 0x11, 0x5e, 0xde, 0xde, 0xb1, 0x7d, 0xe2, 0xf6, 0xaa, 0x44, 0x86, 0x48,
	0x15, 0x0e, 0x94, 0xa9, 0x9c, 0x18, 0x1d, 0x83, 0x3b, 0x88, 0xd2, 0xd5, 0x22, 0xdc, 0x8c, 0xc3,
	0x25, 0x95, 0x91, 0xcd, 0xa0, 0xa8, 0x42, 0x1e, 0xd4, 0x6f, 0xa3, 0x29, 0x5f, 0x27, 0xd4, 0xab,
	0x48, 0xab, 0x11, 0x31, 0x07, 0x18, 0xca, 0xb1, 0x3e, 0x30, 0xf3, 0xa7, 0x00, 0x3a, 0xd5, 0x24,
	0xb8, 0xd6, 0xc9, 0x0b, 0x1a, 0x31, 0xe4, 0xc5, 0x32, 0x8c, 0x16, 0x9e, 0x23, 0x4d, 0x4a, 0xc0,
	0x43, 0xa8, 0x07, 0x2c, 0x4c, 0xf9, 0x56, 0xc9, 0x8a, 0x2c, 0x89, 0xc0, 0x29, 0xd4, 0x72, 0x9e,
	0x69, 0xff, 0x1c, 0x0e, 0x74, 0x22, 0xf3, 0xea, 0x9d, 0x3c, 0xdf, 0x95, 0x25, 0x33, 0x76, 0x8b,
	0x19, 0xaf, 0x2c, 0x95, 0xf3, 0xfb, 0x3a, 0x54, 0x7f, 0x5a, 0xd3, 0x64, 0x83, 0xbf, 0x82, 0xae,
	0x4e, 0xd1, 0x4f, 0x68, 0xc8, 0xa9, 0x49, 0xb4, 0xa3, 0x11, 0xfc, 0x03, 0xb4, 0xb3, 0x72, 0xff,
	0x8b, 0x22, 0xce, 0x06, 0xd4, 0x40, 0x36, 0x88, 0x09, 0x34, 0x06, 0x7c, 0x98, 0x25, 0x4b, 0x75,
	0x4d, 0x7c, 0x06, 0x9d, 0x5c, 0xa5, 0x0b, 0x88, 0x54, 0x34, 0x5d, 0x2f, 0x78, 0xea, 0xd9, 0xc7,
	0x95, 0x52, 0x2a, 0x65, 0xc0, 0xff, 0x54, 0xe0, 0xa3, 0x5b, 0x96, 0xf2, 0xf3, 0x29, 0x8f, 0x7e,
	0x8b, 0xf8, 0xc6, 0xcc, 0xf0, 0x31, 0xd4, 0x04, 0xae, 0x19, 0xa6, 0x5a, 0x42, 0x3e, 0x34, 0xae,
	0xd8, 0x92, 0x3e, 0x24, 0xf4, 0x77, 0xd9, 0x5f, 0x23, 0xc8, 0x64, 0x31, 0xd0, 0x20, 0x89, 0xe2,
	0x5f, 0xbc, 0x9a, 0x42, 0x4c, 0x0a, 0x22, 0xd3, 0x8f, 0x94, 0xbf, 0x67, 0xef, 0x34, 0x02, 0x5a,
	0x42, 0xdf, 0x40, 0xed, 0x7c, 0xc9, 0xd6, 0x31, 0x97, 0x00, 0xbb, 0xbd, 0x23, 0x62, 0x7a, 0x20,
	0x32, 0x50, 0x19, 0x03, 0xed, 0x84, 0x08, 0x38, 0x83, 0x90, 0x53, 0xaf, 0x2a, 0x9d, 0x7d, 0xa2,
	0x56, 0x8a, 0x98, 0x95, 0x22, 0xf7, 0x66, 0xa5, 0x02, 0xe9, 0x27, 0x08, 0xa8, 0x87, 0x95, 0x58,
	0x34, 0x14, 0x01, 0x0b, 0x2a, 0xd1, 0xd8, 0x4d, 0x12, 0xcd, 0xa3, 0xd8, 0xab, 0xab, 0xc6, 0x94,
	0x24, 0xc6, 0x18, 0x33, 0x4e, 0x53, 0xaf, 0xa9, 0xc6, 0x90, 0x02, 0x7a, 0x93, 0x33, 0x09, 0x64,
	0x0b, 0xaf, 0xc8, 0x8e, 0x77, 0x23, 0x97, 0xd1, 0x82, 0x66, 0x24, 0xf3, 0x7f, 0x06, 0x47, 0x28,
	0x04, 0x23, 0x06, 0x21, 0x0f, 0xe5, 0x5b, 0xb6, 0x64, 0x83, 0xa1, 0x78, 0x49, 0x61, 0x8b, 0x73,
	0xa6, 0x64, 0xb2, 0x68, 0xbe, 0xcf, 0x62, 0x4e, 0x63, 0x7e, 0xbf, 0x59, 0x19, 0xea, 0x16, 0x55,
	0xf8, 0x0b, 0xe8, 0x6e, 0x97, 0xd7, 0x98, 0x97, 0x96, 0x02, 0xff, 0xeb, 0x40, 0xc3, 0x38, 0x3d,
	0xda, 0x98, 0xa7, 0x2f, 0xc6, 0x16, 0xce, 0xad, 0xa7, 0x70, 0xae, 0xec, 0xc6, 0xd9, 0x79, 0x02,
	0xe7, 0xea, 0x4b, 0x70, 0x3e, 0xcd, 0xf9, 0x5f, 0x2b, 0xfb, 0x6b, 0xc3, 0x28, 0x9e, 0xb1, 0x6c,
	0x19, 0x9e, 0x87, 0xb1, 0x51, 0x84, 0x71, 0xfb, 0xea, 0x34, 0x1f, 0x5d, 0x1d, 0x43, 0x33, 0x78,
	0x21, 0xcd, 0xde, 0x42, 0xfd, 0x9a, 0xcd, 0x65, 0x88, 0xfb, 0x6c, 0x88, 0x71, 0xf5, 0x5f, 0x67,
	0xe4, 0x14, 0xb3, 0xbc, 0xe4, 0x92, 0xf9, 0x7f, 0xd9, 0xe0, 0x16, 0xde, 0x0b, 0xb5, 0xc0, 0x1e,
	0xcb, 0x90, 0x6a, 0x60, 0x8f, 0xd1, 0x19, 0x38, 0x93, 0x38, 0xe2, 0x32, 0xe2, 0xa0, 0x87, 0x77,
	0x3e, 0x31, 0xe9, 0x87, 0xb3, 0x19, 0x8d, 0x62, 0x2a, 0x3c, 0x03, 0xe9, 0x8f, 0xcf, 0xa0, 0x55,
	0xd4, 0xa2, 0x36, 0xb8, 0x93, 0xf1, 0xdd, 0xed, 0x45, 0x7f, 0x74, 0x39, 0xba, 0x18, 0x74, 0x2c,
	0xd4, 0x84, 0xea, 0xdd, 0xd5, 0xcd, 0xfd, 0x5d, 0xc7, 0x46, 0x00, 0xb5, 0x9b, 0xc9, 0xb8, 0x7f,
	0x71, 0xd7, 0xd9, 0xc3, 0x9f, 0x43, 0xbb, 0x7c, 0x31, 0x4a, 0x43, 0xf4, 0x1e, 0x60, 0x5f, 0x30,
	0x69, 0x10, 0x25, 0x74, 0xca, 0x59, 0xb2, 0x41, 0x5f, 0x42, 0xfb, 0x7c, 0xcd, 0xdf, 0xb3, 0x24,
	0xfa, 0x83, 0xaa, 0x9f, 0x03, 0xb9, 0x24, 0xff, 0x42, 0x7c, 0xc5, 0x3f, 0x6c, 0xa1, 0x13, 0xa8,
	0x0f, 0x29, 0x97, 0x34, 0x6c, 0x91, 0xc2, 0xbf, 0xe8, 0xef, 0x93, 0xe2, 0x37, 0x88, 0xad, 0xde,
	0xdf, 0x76, 0x76, 0xf6, 0xf2, 0x3a, 0xaf, 0x01, 0x86, 0x94, 0x1b, 0x7a, 0xb4, 0xc9, 0xf6, 0x99,
	0xf7, 0x3b, 0xa4, 0x74, 0x88, 0xb1, 0x85, 0x7a, 0xb0, 0xaf, 0x4f, 0xb8, 0x8e, 0x3a, 0x22, 0xbb,
	0x2e, 0xbb, 0x9f, 0x1d, 0x50, 0x6c, 0xa1, 0xb7, 0xe0, 0x5e, 0x47, 0x69, 0x56, 0x27, 0x4b, 0x6b,
	0x4e, 0xb2, 0x7f, 0x48, 0xca, 0x17, 0x19, 0x5b, 0xbd, 0x3f, 0x6d, 0x38, 0x34, 0x2f, 0x97, 0xb7,
	0xfc, 0x2d, 0xb4, 0x8a, 0xdb, 0x8c, 0xba, 0xbb, 0x6e, 0x8b, 0x7f, 0x44, 0x76, 0xad, 0x3c, 0xb6,
	0xd0, 0xd7, 0xe0, 0x0e, 0x69, 0x1e, 0xdd, 0x21, 0xe5, 0xc8, 0x66, 0xa6, 0xc1, 0xd6, 0x43, 0x4d,
	0x32, 0xf3, 0xcd, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x29, 0x83, 0x11, 0xe9, 0xa7, 0x08, 0x00,
	0x00,
}
